#include "ComplexNum.h"


ComplexNum::ComplexNum() : a(0), b(1) {}

ComplexNum::ComplexNum(double A, double B) : a(A), b(B) {}

double ComplexNum::getA()
{
	return a;
}

ComplexNum ComplexNum::operator+(const ComplexNum& other)
{
	double newA = a + other.a;
	double newB = b + other.b;
	ComplexNum result(newA, newB);
	return result;
}


ComplexNum ComplexNum::operator-(const ComplexNum& other)
{
	double newA = a - other.a;
	double newB = b - other.b;
	ComplexNum result(newA, newB);
	return result;
}

ComplexNum ComplexNum::operator*(const ComplexNum& other)
{
	double newA = (a * other.a) - (b * other.b);
	double newB = (b * other.a) + (a * other.b);
	ComplexNum result(newA, newB);
	return result;
}

ComplexNum ComplexNum::operator/(const ComplexNum& other)
{
	if (((other.a * other.a) + (other.b * other.b)) == 0)
	{
		return ComplexNum(a,b);
	}
	double newA = ((a * other.a) + (b * other.b))/((other.a * other.a) + (other.b * other.b));
	double newB = ((b * other.a) - (a * other.b)) / ((other.a * other.a) + (other.b * other.b));
	ComplexNum result(newA, newB);
	return result;
}

ComplexNum& ComplexNum::operator+=(const ComplexNum& other) {
	double newA = a + other.a;
	double newB = b + other.b;
	a = newA;
	b = newB;
	return *this;
}

ComplexNum& ComplexNum::operator-=(const ComplexNum& other) {
	double newA = a - other.a;
	double newB = b - other.b;
	a = newA;
	b = newB;
	return *this;
}

ComplexNum& ComplexNum::operator*=(const ComplexNum& other) {
	double newA = (a * other.a) - (b * other.b);
	double newB = (b * other.a) + (a * other.b);
	a = newA;
	b = newB;
	return *this;
}

ComplexNum& ComplexNum::operator/=(const ComplexNum& other) {
	if (((other.a * other.a) + (other.b * other.b)) == 0)
	{
		return *this;
	}
	double newA = ((a * other.a) + (b * other.b)) / ((other.a * other.a) + (other.b * other.b));
	double newB = ((b * other.a) - (a * other.b)) / ((other.a * other.a) + (other.b * other.b));
	a = newA;
	b = newB;
	return *this;
}

bool ComplexNum::operator==(const ComplexNum& other) {
	return a == other.a && b == other.b;
}

bool ComplexNum::operator!=(const ComplexNum& other)
{
	return !(a == other.a && b == other.b);
}

std::ostream& operator<<(std::ostream& os, const ComplexNum& num) {
	
	os << num.a << ((num.b >= 0) ? "+" : "")<< num.b<<"*i";
	return os;
}